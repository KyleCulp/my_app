defmodule MyApp.Repo.Migrations.GenIdentitiesGithubAndGoogle do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:identities_google, primary_key: false) do
      add(:refresh_token, :text)
      add(:access_token_expires_at, :utc_datetime_usec)
      add(:access_token, :text)
      add(:uid, :text, null: false)
      add(:strategy, :text, null: false)
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)

      add(
        :user_id,
        references(:users,
          column: :id,
          name: "identities_google_user_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    create unique_index(:identities_google, [:strategy, :uid, :user_id],
             name: "identities_google_unique_on_strategy_and_uid_and_user_id_index"
           )

    create table(:identities_github, primary_key: false) do
      add(:refresh_token, :text)
      add(:access_token_expires_at, :utc_datetime_usec)
      add(:access_token, :text)
      add(:uid, :text, null: false)
      add(:strategy, :text, null: false)
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)

      add(
        :user_id,
        references(:users,
          column: :id,
          name: "identities_github_user_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    create unique_index(:identities_github, [:strategy, :uid, :user_id],
             name: "identities_github_unique_on_strategy_and_uid_and_user_id_index"
           )
  end

  def down do
    drop_if_exists(
      unique_index(:identities_github, [:strategy, :uid, :user_id],
        name: "identities_github_unique_on_strategy_and_uid_and_user_id_index"
      )
    )

    drop(constraint(:identities_github, "identities_github_user_id_fkey"))

    drop(table(:identities_github))

    drop_if_exists(
      unique_index(:identities_google, [:strategy, :uid, :user_id],
        name: "identities_google_unique_on_strategy_and_uid_and_user_id_index"
      )
    )

    drop(constraint(:identities_google, "identities_google_user_id_fkey"))

    drop(table(:identities_google))
  end
end
